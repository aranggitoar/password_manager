"""
Copyright (C) 2023  Aranggi J. Toar <at@aranggitoar.com>
Full GPL-3.0 notice https://www.gnu.org/licenses/gpl-3.0.txt
"""

import secrets, sys, os
import modules.prompts as prompts
import modules.master_password as mp
import modules.key as k
from modules.encryption import password_encrypt, password_decrypt
from modules.paths import DB_DIR, SECRETS_DIR

# UTF8 code points integer representations
UTF8_CPS = list(range(128))

# Sort from the highest as to not confuse the deletion with `del LIST[i]` later
# as the deletion is by index and not value
filtered_cps = [39, 34, 32]  # whitespace, double and single quote

for code_point in filtered_cps:
    del UTF8_CPS[code_point]

# Get all UTF8 characters except the filtered ones above and control characters
# (which would have length of repr() more than 3)
UTF8_CHAR = list(
    set([(len(repr(chr(i))) == 3) and chr(i) or '.' for i in UTF8_CPS]))


def generate(length=42) -> str:
    password = ""

    for i in range(length):
        password += secrets.choice(UTF8_CHAR)

    return password


def create():
    name, length, master_password = prompts.password_creation()

    path = DB_DIR / name

    if path.is_file():
        print("Password with name {} exists.".format(name))
        print("Modify by entering 'M' in the main menu.")
        print("Back to main menu.")
    else:
        with open(path, 'w') as f:
            # Check master password
            passed_check = mp.verify(master_password)

            if passed_check:
                # Generate new password
                new_password = generate(length)

                print("\nYour new password for '{}':".format(name))
                print(new_password, "\n")

                # Encrypt the newly generated password
                key = k.get()
                encrypted_password = password_encrypt(new_password.encode(),
                                                      key).decode()

                # Store encrypted password
                f.write(encrypted_password)

                print("\nThe above password encrypted:")
                print(encrypted_password, "\n")

                del new_password
                del encrypted_password
            else:
                print("\nWrong master password.")
                print("Back to main menu.")

    del master_password

def get():
    name, master_password = prompts.password_retrieval()

    path = DB_DIR / name

    if path.is_file():
        # Check master password
        passed_check = mp.verify(master_password)

        if passed_check:
            # Get key for encryption
            key = k.get()

            with open(path, 'rb') as f:
                for line in f.readlines():

                    # Get the encrypted password
                    print("\nYour password for '{}':".format(name))
                    print(password_decrypt(line, key).decode(), "\n")

            del key
        else:
            print("\nWrong master password.")
    else:
        print("\nPassword for that doesn't exist.")
        print("Back to main menu.")

    del master_password


def get_names():
    files = os.listdir(DB_DIR)

    files.remove(SECRETS_DIR.parts[-1])

    print("\nThere are passwords with the following names:")
    print(str(files).replace("[", "").replace("]", ""))


def modify():
    name, new_name, password, master_password = prompts.password_modification()

    passed_check = mp.verify(master_password)

    if passed_check:
        path = DB_DIR / name

        if path.is_file():
            if new_name is None and password is None:
                print("Both fields was empty, going back to main menu.")
                return

            if password is not None:
                # If autogenerated
                if password.startswith('autogen'):
                    # Get length of the password
                    password = generate(password.split(" ")[1])

                encrypted_password = password_encrypt(password,
                                                      k.get())

                with open(path, 'w') as f:
                    f.write(encrypted_password)

                print("Password of name '{}' is changed into:".format(name))
                print(password)

                del encrypted_password
            if new_name is not None:
                new_path = DB_DIR / new_name
                os.rename(path, new_path)

                print("Password name of '{}' is changed to '{}'".format(
                    name, new_name))
    
    del password
    del master_password
